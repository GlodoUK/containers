name: Build and Push Docker Image

permissions:
  packages: write

on:
  workflow_call:
    inputs:
      directory:
        required: true
        type: string
        description: 'Directory containing Dockerfile and versions.yaml'

jobs:
  parse-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Parse versions.yaml and create matrix
        id: set-matrix
        run: |
          matrix_json=$(yq eval -o=json "${{ inputs.directory }}/versions.yaml" | python ./.github/matrix.py)
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          echo "Generated matrix:"
          echo "$matrix_json" | yq -o json

  build-and-push:
    needs: parse-versions
    if: needs.parse-versions.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.parse-versions.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ inputs.directory }}
          tags: |
            type=raw,value=${{ matrix.tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.directory }}
          file: ${{ inputs.directory }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ matrix.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Display build information
        run: |
          echo "Built image for directory: ${{ inputs.directory }}"
          echo "Build args:"
          echo "${{ matrix.build_args }}"
          echo "Tag suffix: ${{ matrix.tag_suffix }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
